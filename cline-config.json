{
  "name": "GitHub Stars Search",
  "description": "一个用于搜索和浏览GitHub星标仓库的React应用，包含可重用的GitHub Action",
  "ai_generated": true,
  "created_by": "Cline",
  "created_at": "2025-08-01",
  "updated_at": "2025-08-06",
  "version": "1.1.0",
  "cline": {
    "exclude_files": [
      "action/src/types/graphql.ts",
      "document/schema.docs.graphql"
    ],
    "git": {
      "no_pager": true,
      "commands": {
        "log": "git --no-pager log",
        "status": "git --no-pager status",
        "diff": "git --no-pager diff",
        "show": "git --no-pager show",
        "blame": "git --no-pager blame",
        "branch": "git --no-pager branch",
        "tag": "git --no-pager tag",
        "stash": "git --no-pager stash",
        "reflog": "git --no-pager reflog"
      }
    },
    "prompts": {
      "development": {
        "setup": "这是一个完全由AI生成的GitHub星标仓库搜索应用，使用React + Vite构建。项目包含前端界面和GitHub Action两部分。前端提供搜索、过滤、排序功能，后端通过GitHub Actions自动获取用户的星标仓库数据。项目遵循AI生成内容政策，所有代码和文档必须由AI生成。",
        "features": [
          "自动同步GitHub星标仓库信息",
          "响应式设计，支持移动端",
          "强大的搜索功能（关键字、语言、主题）",
          "多种排序方式",
          "分页显示和无限滚动",
          "可自定义数据源",
          "详细的编程语言分布统计",
          "仓库主题标签展示",
          "可重用的GitHub Action"
        ],
        "tech_stack": {
          "frontend": {
            "framework": "React 18",
            "build_tool": "Vite",
            "language": "TypeScript",
            "styling": "CSS3, SCSS",
            "state_management": "Jotai",
            "search": "MiniSearch",
            "http_client": "fetch API",
            "testing": "Vitest, React Testing Library"
          },
          "backend": {
            "platform": "GitHub Actions",
            "runtime": "Node.js 24",
            "libraries": ["Octokit", "GraphQL"],
            "packaging": "@vercel/ncc",
            "testing": "Custom test scripts"
          },
          "deployment": {
            "platform": "GitHub Pages",
            "build_output": "docs directory",
            "branch": "gh-pages",
            "cdn": "GitHub CDN"
          },
          "package_manager": "pnpm",
          "development_tools": {
            "code_generation": "GraphQL Code Generator",
            "linting": "ESLint",
            "formatting": "Prettier",
            "type_checking": "TypeScript Compiler"
          }
        },
        "development_commands": {
          "install": "pnpm install",
          "install:action": "cd action && pnpm install",
          "dev": "pnpm run dev",
          "build": "pnpm run build",
          "build:action": "cd action && pnpm run build",
          "preview": "pnpm run preview",
          "type-check": "pnpm run type-check",
          "lint": "pnpm run lint",
          "format": "pnpm run format",
          "test": "pnpm run test",
          "test:coverage": "pnpm run test:coverage",
          "test:graphql": "node scripts/test-graphql-query.cjs",
          "simulate:action": "node scripts/simulate-action.cjs",
          "codegen": "pnpm run codegen"
        },
        "project_structure": {
          "src/": "前端React源代码",
          "action/": "GitHub Action源代码",
          "docs/": "构建输出和GitHub Pages文件",
          "scripts/": "测试和模拟脚本",
          ".github/workflows/": "GitHub Actions工作流配置",
          "data/": "数据存储目录"
        }
      },
      "coding": {
        "react_guidelines": "使用函数组件和React Hooks，保持组件简洁，使用TypeScript类型定义，确保响应式设计。使用React.memo优化性能，实现懒加载和虚拟滚动。",
        "search_implementation": "使用MiniSearch库实现高性能全文搜索，支持模糊匹配、前缀搜索和字段权重配置。搜索字段包括仓库名、描述、语言和主题标签。",
        "data_handling": "数据存储在JSON文件中，通过fetch API加载。支持完整数据格式和简化数据格式，前端使用简化格式提高加载性能。",
        "styling": "使用CSS3实现响应式设计，确保在移动端和桌面端都有良好的用户体验。使用CSS变量管理主题色彩。",
        "typescript_standards": "严格使用TypeScript，定义清晰的接口类型，确保类型安全。包括Repository、SearchFilters、LanguageStats等核心类型定义。"
      },
      "deployment": {
        "github_pages": "项目部署到GitHub Pages，使用gh-pages分支。构建输出到docs目录，支持HTTPS和CDN加速。",
        "github_action": "使用GitHub Actions自动获取星标仓库数据，每天自动运行一次，支持手动触发。Action可重用，支持自定义参数配置。",
        "build_process": "构建流程包括数据获取、前端构建和文件部署。使用Node.js 24环境，统一使用pnpm管理依赖。"
      },
      "maintenance": {
        "data_sync": "GitHub Actions每天自动同步数据，支持手动触发。注意GitHub API限制，每次最多获取1000个星标仓库。",
        "api_limits": "注意GitHub API限制，使用GraphQL API优化查询效率。合理使用分页和缓存策略。",
        "privacy": "建议将仓库设为私有以保护隐私，只处理公开的仓库信息。",
        "performance_monitoring": "监控搜索性能、渲染性能和API响应时间，持续优化用户体验。"
      }
    },
    "hooks": {
      "pre_commit": [
        {
          "name": "Build action directory",
          "description": "如果对代码的修改涉及./action目录，则在提交之前需要在./action目录运行一次pnpm run build",
          "condition": "modified_files.includes('./action') || modified_files.some(file => file.startsWith('./action/'))",
          "command": "cd ./action && pnpm run build",
          "required": true
        },
        {
          "name": "Build frontend",
          "description": "如果对代码的修改涉及./src目录或配置文件，则在提交之前需要运行一次pnpm run build",
          "condition": "modified_files.some(file => file.startsWith('./src/') || ['vite.config.ts', 'tsconfig.json', 'package.json'].includes(file))",
          "command": "pnpm run build",
          "required": false
        }
      ]
    },
    "context": {
      "current_focus": "前端开发和用户体验优化，GitHub Action的可重用性改进",
      "data_format": "JSON格式存储仓库信息，包含完整格式和简化格式。完整格式包含详细的语言统计信息，简化格式用于前端展示。",
      "search_capabilities": "支持仓库名、描述、主题的全文搜索，以及语言过滤和多种排序方式。使用MiniSearch实现高性能搜索，支持模糊匹配和前缀搜索。",
      "user_experience": "提供设置浮窗让用户自定义数据源，支持无限滚动加载更多内容。响应式设计适配移动端和桌面端。",
      "ai_policy": "项目完全由AI生成，所有代码、文档和配置文件必须由AI生成。遵循项目的AI生成内容政策，使用指定的技术栈。",
      "key_dependencies": {
        "frontend": {
          "core": ["react", "react-dom"],
          "build_tools": ["vite", "typescript"],
          "state_management": ["jotai"],
          "search": ["minisearch"],
          "utilities": ["dotenv"],
          "api": ["@octokit/rest"],
          "testing": ["vitest", "@testing-library/react"]
        },
        "action": {
          "github_actions": ["@actions/core", "@actions/github"],
          "api": ["@octokit/graphql", "@octokit/rest"],
          "build_tools": ["@vercel/ncc", "typescript"],
          "testing": ["@types/node"]
        },
        "development": {
          "code_quality": ["eslint", "prettier"],
          "code_generation": ["@graphql-codegen/cli", "@graphql-codegen/typescript"],
          "styling": ["sass"],
          "testing": ["@testing-library/jest-dom", "msw"]
        }
      },
      "build_targets": {
        "frontend": "构建到docs目录，用于GitHub Pages部署",
        "action": "构建到action/dist目录，使用ncc打包"
      }
    },
    "development_workflow": {
      "branching_strategy": "使用master主分支，功能开发使用feature分支",
      "code_review": "所有PR必须经过审查，确保代码完全由AI生成且符合项目标准",
      "testing": "使用scripts目录下的测试脚本验证GraphQL查询和Action功能",
      "deployment": "自动部署到GitHub Pages，支持手动触发部署"
    },
    "ai_assistant": {
      "coding_patterns": {
        "react_components": "使用函数组件和React Hooks，保持组件单一职责，使用TypeScript类型定义，确保响应式设计。使用React.memo优化性能，实现懒加载和虚拟滚动。",
        "state_management": "使用Jotai进行状态管理，区分记忆性和非记忆性状态。搜索和过滤状态使用useState（不记忆），用户设置使用useAtom（记忆）。",
        "data_fetching": "使用fetch API和GraphQL进行数据获取，实现错误处理和加载状态管理。支持完整数据格式和简化数据格式。",
        "search_implementation": "使用MiniSearch实现高性能全文搜索，支持模糊匹配、前缀搜索和字段权重配置。搜索字段包括仓库名、描述、语言和主题标签。",
        "styling_approach": "使用CSS3和SCSS，响应式设计，CSS变量管理主题色彩。确保在移动端和桌面端都有良好的用户体验。"
      },
      "code_generation": {
        "preferred_patterns": ["函数组件", "TypeScript接口", "自定义Hooks", "Jotai状态管理", "MiniSearch搜索"],
        "avoid_patterns": ["类组件", "any类型", "直接DOM操作", "过度嵌套组件", "过时的React API"],
        "component_structure": "单一职责，可复用性，清晰的props类型定义，适当的错误边界处理",
        "performance_considerations": "使用React.memo优化，实现懒加载，虚拟滚动，避免不必要的重新渲染"
      },
      "testing_strategy": {
        "unit_testing": "使用React Testing Library测试组件，测试用户交互和状态管理",
        "integration_testing": "测试数据流和API调用，验证搜索和过滤功能",
        "e2e_testing": "使用Playwright进行端到端测试，验证完整用户流程",
        "testing_utilities": ["React Testing Library", "Vitest", "Playwright", "MSW for API mocking"]
      },
      "documentation_standards": {
        "code_comments": "为复杂逻辑添加注释，解释算法和业务逻辑",
        "type_definitions": "定义清晰的TypeScript接口，包含详细的属性说明",
        "readme_updates": "及时更新README文档，包含安装、使用、开发指南",
        "api_documentation": "为GraphQL查询和API调用提供详细文档"
      },
      "quality_assurance": {
        "code_review_checklist": [
          "TypeScript类型安全",
          "React最佳实践",
          "性能优化",
          "错误处理",
          "响应式设计",
          "可访问性"
        ],
        "performance_metrics": [
          "搜索响应时间",
          "组件渲染性能",
          "API调用效率",
          "内存使用优化"
        ],
        "accessibility_guidelines": "遵循WCAG 2.1标准，确保键盘导航和屏幕阅读器支持"
      }
    }
  }
}
